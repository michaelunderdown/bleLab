
ble3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000abc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000c44  08000c44  00010c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c88  08000c88  00010c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000c98  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000c98  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004be3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f17  00000000  00000000  00024c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b6  00000000  00000000  00025b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000470  00000000  00000000  00026ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004a8  00000000  00000000  00027460  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001eb6  00000000  00000000  00027908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d89  00000000  00000000  000297be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002b547  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000950  00000000  00000000  0002b5c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c2c 	.word	0x08000c2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000c2c 	.word	0x08000c2c

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <HAL_InitTick+0x40>)
{
 80001cc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	b908      	cbnz	r0, 80001d6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80001d2:	2001      	movs	r0, #1
 80001d4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001d6:	4a0d      	ldr	r2, [pc, #52]	; (800020c <HAL_InitTick+0x44>)
 80001d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e0:	6810      	ldr	r0, [r2, #0]
 80001e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e6:	f000 f87d 	bl	80002e4 <HAL_SYSTICK_Config>
 80001ea:	4604      	mov	r4, r0
 80001ec:	2800      	cmp	r0, #0
 80001ee:	d1f0      	bne.n	80001d2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f0:	2d0f      	cmp	r5, #15
 80001f2:	d8ee      	bhi.n	80001d2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f4:	4602      	mov	r2, r0
 80001f6:	4629      	mov	r1, r5
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f000 f83e 	bl	800027c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <HAL_InitTick+0x48>)
 8000202:	4620      	mov	r0, r4
 8000204:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000206:	bd38      	pop	{r3, r4, r5, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	20000008 	.word	0x20000008
 8000210:	20000004 	.word	0x20000004

08000214 <HAL_Init>:
{
 8000214:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000216:	2003      	movs	r0, #3
 8000218:	f000 f81e 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800021c:	2000      	movs	r0, #0
 800021e:	f7ff ffd3 	bl	80001c8 <HAL_InitTick>
 8000222:	4604      	mov	r4, r0
 8000224:	b918      	cbnz	r0, 800022e <HAL_Init+0x1a>
    HAL_MspInit();
 8000226:	f000 fc65 	bl	8000af4 <HAL_MspInit>
}
 800022a:	4620      	mov	r0, r4
 800022c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800022e:	2401      	movs	r4, #1
 8000230:	e7fb      	b.n	800022a <HAL_Init+0x16>
	...

08000234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4904      	ldr	r1, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6813      	ldr	r3, [r2, #0]
 800023a:	6809      	ldr	r1, [r1, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
 8000264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000268:	0200      	lsls	r0, r0, #8
 800026a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027e:	b530      	push	{r4, r5, lr}
 8000280:	68dc      	ldr	r4, [r3, #12]
 8000282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028c:	2b04      	cmp	r3, #4
 800028e:	bf28      	it	cs
 8000290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	f04f 0501 	mov.w	r5, #1
 8000298:	fa05 f303 	lsl.w	r3, r5, r3
 800029c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a0:	bf8c      	ite	hi
 80002a2:	3c03      	subhi	r4, #3
 80002a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a6:	4019      	ands	r1, r3
 80002a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002aa:	fa05 f404 	lsl.w	r4, r5, r4
 80002ae:	3c01      	subs	r4, #1
 80002b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80002b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	ea42 0201 	orr.w	r2, r2, r1
 80002b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	bfad      	iteet	ge
 80002be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	f000 000f 	andlt.w	r0, r0, #15
 80002c6:	4b06      	ldrlt	r3, [pc, #24]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	bfb5      	itete	lt
 80002ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d8:	bd30      	pop	{r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e4:	3801      	subs	r0, #1
 80002e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ea:	d20a      	bcs.n	8000302 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	21f0      	movs	r1, #240	; 0xf0
 80002f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000302:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e010 	.word	0xe000e010
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000310:	4b02      	ldr	r3, [pc, #8]	; (800031c <HAL_PWREx_GetVoltageRange+0xc>)
 8000312:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000314:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40007000 	.word	0x40007000

08000320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000322:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000324:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000328:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800032c:	d11c      	bne.n	8000368 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800032e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000332:	d015      	beq.n	8000360 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800033a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800033e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000342:	6811      	ldr	r1, [r2, #0]
 8000344:	2232      	movs	r2, #50	; 0x32
 8000346:	434a      	muls	r2, r1
 8000348:	490f      	ldr	r1, [pc, #60]	; (8000388 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800034a:	fbb2 f2f1 	udiv	r2, r2, r1
 800034e:	4619      	mov	r1, r3
 8000350:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000352:	6958      	ldr	r0, [r3, #20]
 8000354:	0540      	lsls	r0, r0, #21
 8000356:	d500      	bpl.n	800035a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000358:	b922      	cbnz	r2, 8000364 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800035a:	694b      	ldr	r3, [r1, #20]
 800035c:	055b      	lsls	r3, r3, #21
 800035e:	d40d      	bmi.n	800037c <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
        wait_loop_index--;
 8000364:	3a01      	subs	r2, #1
 8000366:	e7f4      	b.n	8000352 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000368:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800036c:	bf1f      	itttt	ne
 800036e:	681a      	ldrne	r2, [r3, #0]
 8000370:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000374:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000378:	601a      	strne	r2, [r3, #0]
 800037a:	e7f1      	b.n	8000360 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 800037c:	2003      	movs	r0, #3
}
 800037e:	4770      	bx	lr
 8000380:	40007000 	.word	0x40007000
 8000384:	20000008 	.word	0x20000008
 8000388:	000f4240 	.word	0x000f4240

0800038c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800038c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800038e:	4d1e      	ldr	r5, [pc, #120]	; (8000408 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000390:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000392:	00da      	lsls	r2, r3, #3
{
 8000394:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000396:	d518      	bpl.n	80003ca <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000398:	f7ff ffba 	bl	8000310 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800039c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80003a0:	d123      	bne.n	80003ea <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80003a2:	2c80      	cmp	r4, #128	; 0x80
 80003a4:	d929      	bls.n	80003fa <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80003a6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80003a8:	bf8c      	ite	hi
 80003aa:	2002      	movhi	r0, #2
 80003ac:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80003ae:	4a17      	ldr	r2, [pc, #92]	; (800040c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80003b0:	6813      	ldr	r3, [r2, #0]
 80003b2:	f023 0307 	bic.w	r3, r3, #7
 80003b6:	4303      	orrs	r3, r0
 80003b8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80003ba:	6813      	ldr	r3, [r2, #0]
 80003bc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80003c0:	1a18      	subs	r0, r3, r0
 80003c2:	bf18      	it	ne
 80003c4:	2001      	movne	r0, #1
 80003c6:	b003      	add	sp, #12
 80003c8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d0:	65ab      	str	r3, [r5, #88]	; 0x58
 80003d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80003dc:	f7ff ff98 	bl	8000310 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80003e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80003e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80003e8:	e7d8      	b.n	800039c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80003ea:	2c80      	cmp	r4, #128	; 0x80
 80003ec:	d807      	bhi.n	80003fe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80003ee:	d008      	beq.n	8000402 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80003f0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80003f4:	4258      	negs	r0, r3
 80003f6:	4158      	adcs	r0, r3
 80003f8:	e7d9      	b.n	80003ae <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80003fa:	2000      	movs	r0, #0
 80003fc:	e7d7      	b.n	80003ae <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80003fe:	2003      	movs	r0, #3
 8000400:	e7d5      	b.n	80003ae <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000402:	2002      	movs	r0, #2
 8000404:	e7d3      	b.n	80003ae <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40022000 	.word	0x40022000

08000410 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000410:	4b22      	ldr	r3, [pc, #136]	; (800049c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000412:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000414:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000416:	f012 020c 	ands.w	r2, r2, #12
 800041a:	d005      	beq.n	8000428 <HAL_RCC_GetSysClockFreq+0x18>
 800041c:	2a0c      	cmp	r2, #12
 800041e:	d115      	bne.n	800044c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000420:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000424:	2901      	cmp	r1, #1
 8000426:	d118      	bne.n	800045a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000428:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800042a:	481d      	ldr	r0, [pc, #116]	; (80004a0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800042c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800042e:	bf55      	itete	pl
 8000430:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000434:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000436:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800043a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800043e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000442:	b34a      	cbz	r2, 8000498 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000444:	2a0c      	cmp	r2, #12
 8000446:	d009      	beq.n	800045c <HAL_RCC_GetSysClockFreq+0x4c>
 8000448:	2000      	movs	r0, #0
  return sysclockfreq;
 800044a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800044c:	2a04      	cmp	r2, #4
 800044e:	d022      	beq.n	8000496 <HAL_RCC_GetSysClockFreq+0x86>
 8000450:	2a08      	cmp	r2, #8
 8000452:	4814      	ldr	r0, [pc, #80]	; (80004a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8000454:	bf18      	it	ne
 8000456:	2000      	movne	r0, #0
 8000458:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800045a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800045c:	68da      	ldr	r2, [r3, #12]
 800045e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000462:	2a02      	cmp	r2, #2
 8000464:	d015      	beq.n	8000492 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000466:	490f      	ldr	r1, [pc, #60]	; (80004a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8000468:	2a03      	cmp	r2, #3
 800046a:	bf08      	it	eq
 800046c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800046e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000470:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000478:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800047c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000480:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000482:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000484:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000486:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000488:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 800048c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000490:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8000494:	e7eb      	b.n	800046e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	08000c54 	.word	0x08000c54
 80004a4:	007a1200 	.word	0x007a1200
 80004a8:	00f42400 	.word	0x00f42400

080004ac <HAL_RCC_OscConfig>:
{
 80004ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80004b0:	4605      	mov	r5, r0
 80004b2:	b908      	cbnz	r0, 80004b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004b4:	2001      	movs	r0, #1
 80004b6:	e047      	b.n	8000548 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80004b8:	4ca6      	ldr	r4, [pc, #664]	; (8000754 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004ba:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80004bc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80004be:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004c0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80004c2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80004c6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004ca:	d573      	bpl.n	80005b4 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80004cc:	b11e      	cbz	r6, 80004d6 <HAL_RCC_OscConfig+0x2a>
 80004ce:	2e0c      	cmp	r6, #12
 80004d0:	d152      	bne.n	8000578 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80004d2:	2f01      	cmp	r7, #1
 80004d4:	d150      	bne.n	8000578 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80004d6:	6823      	ldr	r3, [r4, #0]
 80004d8:	0798      	lsls	r0, r3, #30
 80004da:	d502      	bpl.n	80004e2 <HAL_RCC_OscConfig+0x36>
 80004dc:	69ab      	ldr	r3, [r5, #24]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0e8      	beq.n	80004b4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80004e2:	6823      	ldr	r3, [r4, #0]
 80004e4:	6a28      	ldr	r0, [r5, #32]
 80004e6:	0719      	lsls	r1, r3, #28
 80004e8:	bf56      	itet	pl
 80004ea:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80004ee:	6823      	ldrmi	r3, [r4, #0]
 80004f0:	091b      	lsrpl	r3, r3, #4
 80004f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004f6:	4283      	cmp	r3, r0
 80004f8:	d229      	bcs.n	800054e <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80004fa:	f7ff ff47 	bl	800038c <RCC_SetFlashLatencyFromMSIRange>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d1d8      	bne.n	80004b4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	6023      	str	r3, [r4, #0]
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	6a2a      	ldr	r2, [r5, #32]
 800050e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000512:	4313      	orrs	r3, r2
 8000514:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	69ea      	ldr	r2, [r5, #28]
 800051a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800051e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000522:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000524:	f7ff ff74 	bl	8000410 <HAL_RCC_GetSysClockFreq>
 8000528:	68a3      	ldr	r3, [r4, #8]
 800052a:	4a8b      	ldr	r2, [pc, #556]	; (8000758 <HAL_RCC_OscConfig+0x2ac>)
 800052c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000530:	5cd3      	ldrb	r3, [r2, r3]
 8000532:	f003 031f 	and.w	r3, r3, #31
 8000536:	40d8      	lsrs	r0, r3
 8000538:	4b88      	ldr	r3, [pc, #544]	; (800075c <HAL_RCC_OscConfig+0x2b0>)
 800053a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800053c:	4b88      	ldr	r3, [pc, #544]	; (8000760 <HAL_RCC_OscConfig+0x2b4>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	f7ff fe42 	bl	80001c8 <HAL_InitTick>
        if(status != HAL_OK)
 8000544:	2800      	cmp	r0, #0
 8000546:	d035      	beq.n	80005b4 <HAL_RCC_OscConfig+0x108>
}
 8000548:	b003      	add	sp, #12
 800054a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6023      	str	r3, [r4, #0]
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800055c:	4303      	orrs	r3, r0
 800055e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000560:	6863      	ldr	r3, [r4, #4]
 8000562:	69ea      	ldr	r2, [r5, #28]
 8000564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800056c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800056e:	f7ff ff0d 	bl	800038c <RCC_SetFlashLatencyFromMSIRange>
 8000572:	2800      	cmp	r0, #0
 8000574:	d0d6      	beq.n	8000524 <HAL_RCC_OscConfig+0x78>
 8000576:	e79d      	b.n	80004b4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000578:	69ab      	ldr	r3, [r5, #24]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d036      	beq.n	80005ec <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000586:	f7ff fe61 	bl	800024c <HAL_GetTick>
 800058a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	079a      	lsls	r2, r3, #30
 8000590:	d524      	bpl.n	80005dc <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6023      	str	r3, [r4, #0]
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	6a2a      	ldr	r2, [r5, #32]
 800059e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005a2:	4313      	orrs	r3, r2
 80005a4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005a6:	6863      	ldr	r3, [r4, #4]
 80005a8:	69ea      	ldr	r2, [r5, #28]
 80005aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005b2:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005b4:	682b      	ldr	r3, [r5, #0]
 80005b6:	07d8      	lsls	r0, r3, #31
 80005b8:	d429      	bmi.n	800060e <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005ba:	682b      	ldr	r3, [r5, #0]
 80005bc:	0799      	lsls	r1, r3, #30
 80005be:	d467      	bmi.n	8000690 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	0718      	lsls	r0, r3, #28
 80005c4:	f100 809c 	bmi.w	8000700 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	0759      	lsls	r1, r3, #29
 80005cc:	f100 80ca 	bmi.w	8000764 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80005d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80005d2:	2800      	cmp	r0, #0
 80005d4:	f040 8133 	bne.w	800083e <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 80005d8:	2000      	movs	r0, #0
 80005da:	e7b5      	b.n	8000548 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80005dc:	f7ff fe36 	bl	800024c <HAL_GetTick>
 80005e0:	eba0 0008 	sub.w	r0, r0, r8
 80005e4:	2802      	cmp	r0, #2
 80005e6:	d9d1      	bls.n	800058c <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 80005e8:	2003      	movs	r0, #3
 80005ea:	e7ad      	b.n	8000548 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	f023 0301 	bic.w	r3, r3, #1
 80005f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005f4:	f7ff fe2a 	bl	800024c <HAL_GetTick>
 80005f8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	079b      	lsls	r3, r3, #30
 80005fe:	d5d9      	bpl.n	80005b4 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000600:	f7ff fe24 	bl	800024c <HAL_GetTick>
 8000604:	eba0 0008 	sub.w	r0, r0, r8
 8000608:	2802      	cmp	r0, #2
 800060a:	d9f6      	bls.n	80005fa <HAL_RCC_OscConfig+0x14e>
 800060c:	e7ec      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800060e:	2e08      	cmp	r6, #8
 8000610:	d003      	beq.n	800061a <HAL_RCC_OscConfig+0x16e>
 8000612:	2e0c      	cmp	r6, #12
 8000614:	d108      	bne.n	8000628 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000616:	2f03      	cmp	r7, #3
 8000618:	d106      	bne.n	8000628 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	039a      	lsls	r2, r3, #14
 800061e:	d5cc      	bpl.n	80005ba <HAL_RCC_OscConfig+0x10e>
 8000620:	686b      	ldr	r3, [r5, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1c9      	bne.n	80005ba <HAL_RCC_OscConfig+0x10e>
 8000626:	e745      	b.n	80004b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000628:	686b      	ldr	r3, [r5, #4]
 800062a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800062e:	d110      	bne.n	8000652 <HAL_RCC_OscConfig+0x1a6>
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000636:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000638:	f7ff fe08 	bl	800024c <HAL_GetTick>
 800063c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	039b      	lsls	r3, r3, #14
 8000642:	d4ba      	bmi.n	80005ba <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000644:	f7ff fe02 	bl	800024c <HAL_GetTick>
 8000648:	eba0 0008 	sub.w	r0, r0, r8
 800064c:	2864      	cmp	r0, #100	; 0x64
 800064e:	d9f6      	bls.n	800063e <HAL_RCC_OscConfig+0x192>
 8000650:	e7ca      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000656:	d104      	bne.n	8000662 <HAL_RCC_OscConfig+0x1b6>
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065e:	6023      	str	r3, [r4, #0]
 8000660:	e7e6      	b.n	8000630 <HAL_RCC_OscConfig+0x184>
 8000662:	6822      	ldr	r2, [r4, #0]
 8000664:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000668:	6022      	str	r2, [r4, #0]
 800066a:	6822      	ldr	r2, [r4, #0]
 800066c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000670:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1e0      	bne.n	8000638 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8000676:	f7ff fde9 	bl	800024c <HAL_GetTick>
 800067a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	0398      	lsls	r0, r3, #14
 8000680:	d59b      	bpl.n	80005ba <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000682:	f7ff fde3 	bl	800024c <HAL_GetTick>
 8000686:	eba0 0008 	sub.w	r0, r0, r8
 800068a:	2864      	cmp	r0, #100	; 0x64
 800068c:	d9f6      	bls.n	800067c <HAL_RCC_OscConfig+0x1d0>
 800068e:	e7ab      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000690:	2e04      	cmp	r6, #4
 8000692:	d003      	beq.n	800069c <HAL_RCC_OscConfig+0x1f0>
 8000694:	2e0c      	cmp	r6, #12
 8000696:	d110      	bne.n	80006ba <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000698:	2f02      	cmp	r7, #2
 800069a:	d10e      	bne.n	80006ba <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	0559      	lsls	r1, r3, #21
 80006a0:	d503      	bpl.n	80006aa <HAL_RCC_OscConfig+0x1fe>
 80006a2:	68eb      	ldr	r3, [r5, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f43f af05 	beq.w	80004b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006aa:	6863      	ldr	r3, [r4, #4]
 80006ac:	692a      	ldr	r2, [r5, #16]
 80006ae:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80006b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80006b6:	6063      	str	r3, [r4, #4]
 80006b8:	e782      	b.n	80005c0 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ba:	68eb      	ldr	r3, [r5, #12]
 80006bc:	b17b      	cbz	r3, 80006de <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006c6:	f7ff fdc1 	bl	800024c <HAL_GetTick>
 80006ca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80006cc:	6823      	ldr	r3, [r4, #0]
 80006ce:	055a      	lsls	r2, r3, #21
 80006d0:	d4eb      	bmi.n	80006aa <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006d2:	f7ff fdbb 	bl	800024c <HAL_GetTick>
 80006d6:	1bc0      	subs	r0, r0, r7
 80006d8:	2802      	cmp	r0, #2
 80006da:	d9f7      	bls.n	80006cc <HAL_RCC_OscConfig+0x220>
 80006dc:	e784      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006e6:	f7ff fdb1 	bl	800024c <HAL_GetTick>
 80006ea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	055b      	lsls	r3, r3, #21
 80006f0:	f57f af66 	bpl.w	80005c0 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006f4:	f7ff fdaa 	bl	800024c <HAL_GetTick>
 80006f8:	1bc0      	subs	r0, r0, r7
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9f6      	bls.n	80006ec <HAL_RCC_OscConfig+0x240>
 80006fe:	e773      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000700:	696b      	ldr	r3, [r5, #20]
 8000702:	b19b      	cbz	r3, 800072c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000704:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000710:	f7ff fd9c 	bl	800024c <HAL_GetTick>
 8000714:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000716:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800071a:	079a      	lsls	r2, r3, #30
 800071c:	f53f af54 	bmi.w	80005c8 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000720:	f7ff fd94 	bl	800024c <HAL_GetTick>
 8000724:	1bc0      	subs	r0, r0, r7
 8000726:	2802      	cmp	r0, #2
 8000728:	d9f5      	bls.n	8000716 <HAL_RCC_OscConfig+0x26a>
 800072a:	e75d      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 800072c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000738:	f7ff fd88 	bl	800024c <HAL_GetTick>
 800073c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800073e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000742:	079b      	lsls	r3, r3, #30
 8000744:	f57f af40 	bpl.w	80005c8 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000748:	f7ff fd80 	bl	800024c <HAL_GetTick>
 800074c:	1bc0      	subs	r0, r0, r7
 800074e:	2802      	cmp	r0, #2
 8000750:	d9f5      	bls.n	800073e <HAL_RCC_OscConfig+0x292>
 8000752:	e749      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
 8000754:	40021000 	.word	0x40021000
 8000758:	08000c44 	.word	0x08000c44
 800075c:	20000008 	.word	0x20000008
 8000760:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000766:	00d8      	lsls	r0, r3, #3
 8000768:	d429      	bmi.n	80007be <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	65a3      	str	r3, [r4, #88]	; 0x58
 8000772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800077c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000780:	4f79      	ldr	r7, [pc, #484]	; (8000968 <HAL_RCC_OscConfig+0x4bc>)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	05d9      	lsls	r1, r3, #23
 8000786:	d51d      	bpl.n	80007c4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000788:	68ab      	ldr	r3, [r5, #8]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d12b      	bne.n	80007e6 <HAL_RCC_OscConfig+0x33a>
 800078e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800079a:	f7ff fd57 	bl	800024c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800079e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007a2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80007a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80007a8:	079b      	lsls	r3, r3, #30
 80007aa:	d542      	bpl.n	8000832 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 80007ac:	f1b8 0f00 	cmp.w	r8, #0
 80007b0:	f43f af0e 	beq.w	80005d0 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80007bc:	e708      	b.n	80005d0 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 80007be:	f04f 0800 	mov.w	r8, #0
 80007c2:	e7dd      	b.n	8000780 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007cc:	f7ff fd3e 	bl	800024c <HAL_GetTick>
 80007d0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	05da      	lsls	r2, r3, #23
 80007d6:	d4d7      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007d8:	f7ff fd38 	bl	800024c <HAL_GetTick>
 80007dc:	eba0 0009 	sub.w	r0, r0, r9
 80007e0:	2802      	cmp	r0, #2
 80007e2:	d9f6      	bls.n	80007d2 <HAL_RCC_OscConfig+0x326>
 80007e4:	e700      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e6:	2b05      	cmp	r3, #5
 80007e8:	d106      	bne.n	80007f8 <HAL_RCC_OscConfig+0x34c>
 80007ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80007f6:	e7ca      	b.n	800078e <HAL_RCC_OscConfig+0x2e2>
 80007f8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80007fc:	f022 0201 	bic.w	r2, r2, #1
 8000800:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000804:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000808:	f022 0204 	bic.w	r2, r2, #4
 800080c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1c2      	bne.n	800079a <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8000814:	f7ff fd1a 	bl	800024c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000818:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800081c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800081e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000822:	0798      	lsls	r0, r3, #30
 8000824:	d5c2      	bpl.n	80007ac <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000826:	f7ff fd11 	bl	800024c <HAL_GetTick>
 800082a:	1bc0      	subs	r0, r0, r7
 800082c:	4548      	cmp	r0, r9
 800082e:	d9f6      	bls.n	800081e <HAL_RCC_OscConfig+0x372>
 8000830:	e6da      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000832:	f7ff fd0b 	bl	800024c <HAL_GetTick>
 8000836:	1bc0      	subs	r0, r0, r7
 8000838:	4548      	cmp	r0, r9
 800083a:	d9b3      	bls.n	80007a4 <HAL_RCC_OscConfig+0x2f8>
 800083c:	e6d4      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800083e:	2e0c      	cmp	r6, #12
 8000840:	d05c      	beq.n	80008fc <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8000842:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000844:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800084a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800084c:	d13b      	bne.n	80008c6 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 800084e:	f7ff fcfd 	bl	800024c <HAL_GetTick>
 8000852:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	0199      	lsls	r1, r3, #6
 8000858:	d42f      	bmi.n	80008ba <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800085a:	68e2      	ldr	r2, [r4, #12]
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <HAL_RCC_OscConfig+0x4c0>)
 800085e:	4013      	ands	r3, r2
 8000860:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000862:	4313      	orrs	r3, r2
 8000864:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800086a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800086c:	3a01      	subs	r2, #1
 800086e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000872:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000874:	0912      	lsrs	r2, r2, #4
 8000876:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800087a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800087c:	0852      	lsrs	r2, r2, #1
 800087e:	3a01      	subs	r2, #1
 8000880:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000884:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000886:	0852      	lsrs	r2, r2, #1
 8000888:	3a01      	subs	r2, #1
 800088a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800088e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000896:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000898:	68e3      	ldr	r3, [r4, #12]
 800089a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800089e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcd4 	bl	800024c <HAL_GetTick>
 80008a4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	019a      	lsls	r2, r3, #6
 80008aa:	f53f ae95 	bmi.w	80005d8 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008ae:	f7ff fccd 	bl	800024c <HAL_GetTick>
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	2802      	cmp	r0, #2
 80008b6:	d9f6      	bls.n	80008a6 <HAL_RCC_OscConfig+0x3fa>
 80008b8:	e696      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008ba:	f7ff fcc7 	bl	800024c <HAL_GetTick>
 80008be:	1b80      	subs	r0, r0, r6
 80008c0:	2802      	cmp	r0, #2
 80008c2:	d9c7      	bls.n	8000854 <HAL_RCC_OscConfig+0x3a8>
 80008c4:	e690      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80008cc:	bf02      	ittt	eq
 80008ce:	68e3      	ldreq	r3, [r4, #12]
 80008d0:	f023 0303 	biceq.w	r3, r3, #3
 80008d4:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80008d6:	68e3      	ldr	r3, [r4, #12]
 80008d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80008dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80008e2:	f7ff fcb3 	bl	800024c <HAL_GetTick>
 80008e6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	019b      	lsls	r3, r3, #6
 80008ec:	f57f ae74 	bpl.w	80005d8 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008f0:	f7ff fcac 	bl	800024c <HAL_GetTick>
 80008f4:	1b40      	subs	r0, r0, r5
 80008f6:	2802      	cmp	r0, #2
 80008f8:	d9f6      	bls.n	80008e8 <HAL_RCC_OscConfig+0x43c>
 80008fa:	e675      	b.n	80005e8 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008fc:	2801      	cmp	r0, #1
 80008fe:	f43f ae23 	beq.w	8000548 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8000902:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000904:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000906:	f003 0103 	and.w	r1, r3, #3
 800090a:	4291      	cmp	r1, r2
 800090c:	f47f add2 	bne.w	80004b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000910:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000912:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000916:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000918:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800091c:	f47f adca 	bne.w	80004b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000920:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000922:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000926:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800092a:	f47f adc3 	bne.w	80004b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800092e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000930:	3a07      	subs	r2, #7
 8000932:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8000936:	bf18      	it	ne
 8000938:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800093a:	4291      	cmp	r1, r2
 800093c:	f47f adba 	bne.w	80004b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000940:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000942:	0852      	lsrs	r2, r2, #1
 8000944:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000948:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800094a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800094e:	f47f adb1 	bne.w	80004b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000952:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000954:	0852      	lsrs	r2, r2, #1
 8000956:	3a01      	subs	r2, #1
 8000958:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800095c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8000960:	bf14      	ite	ne
 8000962:	2001      	movne	r0, #1
 8000964:	2000      	moveq	r0, #0
 8000966:	e5ef      	b.n	8000548 <HAL_RCC_OscConfig+0x9c>
 8000968:	40007000 	.word	0x40007000
 800096c:	f99d808c 	.word	0xf99d808c

08000970 <HAL_RCC_ClockConfig>:
{
 8000970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000974:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000976:	4604      	mov	r4, r0
 8000978:	b910      	cbnz	r0, 8000980 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800097a:	2001      	movs	r0, #1
 800097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000980:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <HAL_RCC_ClockConfig+0x118>)
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	428b      	cmp	r3, r1
 800098a:	d32a      	bcc.n	80009e2 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	07d9      	lsls	r1, r3, #31
 8000990:	d432      	bmi.n	80009f8 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000992:	6821      	ldr	r1, [r4, #0]
 8000994:	078a      	lsls	r2, r1, #30
 8000996:	d45c      	bmi.n	8000a52 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000998:	4a3b      	ldr	r2, [pc, #236]	; (8000a88 <HAL_RCC_ClockConfig+0x118>)
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	429e      	cmp	r6, r3
 80009a2:	d35e      	bcc.n	8000a62 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009a4:	f011 0f04 	tst.w	r1, #4
 80009a8:	4d38      	ldr	r5, [pc, #224]	; (8000a8c <HAL_RCC_ClockConfig+0x11c>)
 80009aa:	d165      	bne.n	8000a78 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009ac:	070b      	lsls	r3, r1, #28
 80009ae:	d506      	bpl.n	80009be <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009b0:	68ab      	ldr	r3, [r5, #8]
 80009b2:	6922      	ldr	r2, [r4, #16]
 80009b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009bc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80009be:	f7ff fd27 	bl	8000410 <HAL_RCC_GetSysClockFreq>
 80009c2:	68ab      	ldr	r3, [r5, #8]
 80009c4:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <HAL_RCC_ClockConfig+0x120>)
 80009c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80009ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	f003 031f 	and.w	r3, r3, #31
 80009d4:	40d8      	lsrs	r0, r3
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <HAL_RCC_ClockConfig+0x124>)
 80009d8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80009da:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <HAL_RCC_ClockConfig+0x128>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f7ff bbf3 	b.w	80001c8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e2:	6813      	ldr	r3, [r2, #0]
 80009e4:	f023 0307 	bic.w	r3, r3, #7
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009ec:	6813      	ldr	r3, [r2, #0]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	4299      	cmp	r1, r3
 80009f4:	d1c1      	bne.n	800097a <HAL_RCC_ClockConfig+0xa>
 80009f6:	e7c9      	b.n	800098c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009f8:	6862      	ldr	r2, [r4, #4]
 80009fa:	4d24      	ldr	r5, [pc, #144]	; (8000a8c <HAL_RCC_ClockConfig+0x11c>)
 80009fc:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80009fe:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a00:	d11b      	bne.n	8000a3a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000a02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a06:	d0b8      	beq.n	800097a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000a08:	68ab      	ldr	r3, [r5, #8]
 8000a0a:	f023 0303 	bic.w	r3, r3, #3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000a12:	f7ff fc1b 	bl	800024c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a16:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a1a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a1c:	68ab      	ldr	r3, [r5, #8]
 8000a1e:	6862      	ldr	r2, [r4, #4]
 8000a20:	f003 030c 	and.w	r3, r3, #12
 8000a24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a28:	d0b3      	beq.n	8000992 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2a:	f7ff fc0f 	bl	800024c <HAL_GetTick>
 8000a2e:	1bc0      	subs	r0, r0, r7
 8000a30:	4540      	cmp	r0, r8
 8000a32:	d9f3      	bls.n	8000a1c <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8000a34:	2003      	movs	r0, #3
}
 8000a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3a:	2a02      	cmp	r2, #2
 8000a3c:	d102      	bne.n	8000a44 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a42:	e7e0      	b.n	8000a06 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000a44:	b912      	cbnz	r2, 8000a4c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a46:	f013 0f02 	tst.w	r3, #2
 8000a4a:	e7dc      	b.n	8000a06 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000a50:	e7d9      	b.n	8000a06 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_RCC_ClockConfig+0x11c>)
 8000a54:	68a0      	ldr	r0, [r4, #8]
 8000a56:	6893      	ldr	r3, [r2, #8]
 8000a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a5c:	4303      	orrs	r3, r0
 8000a5e:	6093      	str	r3, [r2, #8]
 8000a60:	e79a      	b.n	8000998 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	f023 0307 	bic.w	r3, r3, #7
 8000a68:	4333      	orrs	r3, r6
 8000a6a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a6c:	6813      	ldr	r3, [r2, #0]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	429e      	cmp	r6, r3
 8000a74:	d181      	bne.n	800097a <HAL_RCC_ClockConfig+0xa>
 8000a76:	e795      	b.n	80009a4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a78:	68ab      	ldr	r3, [r5, #8]
 8000a7a:	68e2      	ldr	r2, [r4, #12]
 8000a7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60ab      	str	r3, [r5, #8]
 8000a84:	e792      	b.n	80009ac <HAL_RCC_ClockConfig+0x3c>
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	08000c44 	.word	0x08000c44
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b500      	push	{lr}
 8000a9e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa0:	2244      	movs	r2, #68	; 0x44
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	a805      	add	r0, sp, #20
 8000aa6:	f000 f8b9 	bl	8000c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aaa:	2214      	movs	r2, #20
 8000aac:	2100      	movs	r1, #0
 8000aae:	4668      	mov	r0, sp
 8000ab0:	f000 f8b4 	bl	8000c1c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000abe:	2360      	movs	r3, #96	; 0x60
 8000ac0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f7ff fcf3 	bl	80004ac <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ac6:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aca:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ace:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	f7ff ff4b 	bl	8000970 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ada:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ade:	f7ff fc1f 	bl	8000320 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8000ae2:	b017      	add	sp, #92	; 0x5c
 8000ae4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ae8 <main>:
{
 8000ae8:	b508      	push	{r3, lr}
  HAL_Init();
 8000aea:	f7ff fb93 	bl	8000214 <HAL_Init>
  SystemClock_Config();
 8000aee:	f7ff ffd5 	bl	8000a9c <SystemClock_Config>
 8000af2:	e7fe      	b.n	8000af2 <main+0xa>

08000af4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_MspInit+0x2c>)
 8000af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000af8:	f042 0201 	orr.w	r2, r2, #1
 8000afc:	661a      	str	r2, [r3, #96]	; 0x60
 8000afe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000b00:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	f002 0201 	and.w	r2, r2, #1
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b10:	659a      	str	r2, [r3, #88]	; 0x58
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	b002      	add	sp, #8
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
 8000b24:	4770      	bx	lr

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler>

08000b2e <SVC_Handler>:
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f7ff bb7e 	b.w	8000234 <HAL_IncTick>

08000b38 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	490f      	ldr	r1, [pc, #60]	; (8000b78 <SystemInit+0x40>)
 8000b3a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000b3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <SystemInit+0x44>)
 8000b48:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b4a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000b4c:	f042 0201 	orr.w	r2, r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8000b52:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000b5a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b6c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b6e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	608b      	str	r3, [r1, #8]
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	40021000 	.word	0x40021000

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b86:	e003      	b.n	8000b90 <LoopCopyDataInit>

08000b88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b8e:	3104      	adds	r1, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b98:	d3f6      	bcc.n	8000b88 <CopyDataInit>
	ldr	r2, =_sbss
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b9c:	e002      	b.n	8000ba4 <LoopFillZerobss>

08000b9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba0:	f842 3b04 	str.w	r3, [r2], #4

08000ba4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <LoopForever+0x16>)
	cmp	r2, r3
 8000ba6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba8:	d3f9      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000baa:	f7ff ffc5 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f000 f811 	bl	8000bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff ff99 	bl	8000ae8 <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bbc:	08000c8c 	.word	0x08000c8c
	ldr	r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bc8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bcc:	2000002c 	.word	0x2000002c

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <__libc_init_array>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	4e0d      	ldr	r6, [pc, #52]	; (8000c0c <__libc_init_array+0x38>)
 8000bd8:	4c0d      	ldr	r4, [pc, #52]	; (8000c10 <__libc_init_array+0x3c>)
 8000bda:	1ba4      	subs	r4, r4, r6
 8000bdc:	10a4      	asrs	r4, r4, #2
 8000bde:	2500      	movs	r5, #0
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	d109      	bne.n	8000bf8 <__libc_init_array+0x24>
 8000be4:	4e0b      	ldr	r6, [pc, #44]	; (8000c14 <__libc_init_array+0x40>)
 8000be6:	4c0c      	ldr	r4, [pc, #48]	; (8000c18 <__libc_init_array+0x44>)
 8000be8:	f000 f820 	bl	8000c2c <_init>
 8000bec:	1ba4      	subs	r4, r4, r6
 8000bee:	10a4      	asrs	r4, r4, #2
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	d105      	bne.n	8000c02 <__libc_init_array+0x2e>
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bfc:	4798      	blx	r3
 8000bfe:	3501      	adds	r5, #1
 8000c00:	e7ee      	b.n	8000be0 <__libc_init_array+0xc>
 8000c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c06:	4798      	blx	r3
 8000c08:	3501      	adds	r5, #1
 8000c0a:	e7f2      	b.n	8000bf2 <__libc_init_array+0x1e>
 8000c0c:	08000c84 	.word	0x08000c84
 8000c10:	08000c84 	.word	0x08000c84
 8000c14:	08000c84 	.word	0x08000c84
 8000c18:	08000c88 	.word	0x08000c88

08000c1c <memset>:
 8000c1c:	4402      	add	r2, r0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d100      	bne.n	8000c26 <memset+0xa>
 8000c24:	4770      	bx	lr
 8000c26:	f803 1b01 	strb.w	r1, [r3], #1
 8000c2a:	e7f9      	b.n	8000c20 <memset+0x4>

08000c2c <_init>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr

08000c38 <_fini>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	bf00      	nop
 8000c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3e:	bc08      	pop	{r3}
 8000c40:	469e      	mov	lr, r3
 8000c42:	4770      	bx	lr
